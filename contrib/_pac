#compdef pac

_pac() {
    typeset -A opt_args
    local ret=1

    local context curcontext="$curcontext" state line
    _arguments -s -S -C \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
"1:: :_pac_commands" \
"*:: :->pac" \
&& ret=0
    case $state in
    (pac)
        curcontext="${curcontext%:*:*}:pac-command-$words[1]:"
        case $line[1] in
            (list)
_arguments -s -S -C \
'-c+[List packages under this category]' \
'--category+[List packages under this category]' \
'(-o --opt)-s[List start packages]' \
'(-o --opt)--start[List start packages]' \
'(-s --start)-o[List optional packages]' \
'(-s --start)--opt[List optional packages]' \
'-d[List detached(untracked) packages]' \
'--detached[List detached(untracked) packages]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
(install)
_arguments -s -S -C \
'-c+[Install package under provided category]' \
'--category+[Install package under provided category]' \
'(--tag --commit)--branch+[Checkout this branch by default]' \
'--tag+[Checkout this tag by default]' \
'--commit+[Checkout this commit by default]' \
'--as+[Install plugin under this name]' \
'--on+[Command for loading the plugins]' \
'--for+[Load this plugins for specific types]' \
'--build+[Build command for build package]' \
'-j+[Installing packages concurrently]' \
'--threads+[Installing packages concurrently]' \
'-o[Install plugins as opt(ional)]' \
'--opt[Install plugins as opt(ional)]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
"1:: :_pac__install_commands" \
&& ret=0
;;
(uninstall)
_arguments -s -S -C \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
"1:: :_pac__uninstall_commands" \
&& ret=0
;;
(move)
_arguments -s -S -C \
'-o[Make package optional]' \
'--opt[Make package optional]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
"1:: :_pac__move_commands" \
&& ret=0
;;
(update)
_arguments -s -S -C \
'*-s[Skip packages]' \
'*--skip[Skip packages]' \
'-j[Updating packages concurrently]' \
'--threads[Updating packages concurrently]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
"1:: :_pac__update_commands" \
&& ret=0
;;
(generate)
_arguments -s -S -C \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
(completions)
_arguments -s -S -C \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
"1:: :_pac__completions_commands" \
&& ret=0
;;
(help)
_arguments -s -S -C \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
        esac
    ;;
esac
}

(( $+functions[_pac_commands] )) ||
_pac_commands() {
    local commands; commands=(
        "list:List installed packages" \
"install:Install new packages/plugins" \
"uninstall:Uninstall packages/plugins" \
"move:Move a package to a different category or make it optional." \
"update:Update packages" \
"generate:Generate the pack package file" \
"completions:Generates completion scripts for your shell" \
"help:Prints this message or the help of the given subcommand(s)" \
    )
    _describe -t commands 'pac commands' commands "$@"
}
(( $+functions[_pac__completions_commands] )) ||
_pac__completions_commands() {
    local commands; commands=(
        "SHELL:The shell to generate the script for" \
    )
    _describe -t commands 'pac completions commands' commands "$@"
}
(( $+functions[_pac__generate_commands] )) ||
_pac__generate_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'pac generate commands' commands "$@"
}
(( $+functions[_pac__help_commands] )) ||
_pac__help_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'pac help commands' commands "$@"
}
(( $+functions[_pac__install_commands] )) ||
_pac__install_commands() {
    local commands; commands=(
        "PACKAGE:" \
    )
    _describe -t commands 'pac install commands' commands "$@"
}
(( $+functions[_pac__list_commands] )) ||
_pac__list_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'pac list commands' commands "$@"
}
(( $+functions[_pac__move_commands] )) ||
_pac__move_commands() {
    local commands; commands=("${(@f)$(pac list | cut -f1 -d' ')}")
    _describe -t commands 'pac move commands' commands "$@"
}
(( $+functions[_pac__uninstall_commands] )) ||
_pac__uninstall_commands() {
    local commands; commands=("${(@f)$(pac list | cut -f1 -d' ')}")
    _describe -t commands 'pac uninstall commands' commands "$@"
}
(( $+functions[_pac__update_commands] )) ||
_pac__update_commands() {
    local commands; commands=("${(@f)$(pac list | cut -f1 -d' ')}")
    _describe -t commands 'pac update commands' commands "$@"
}

_pac "$@"
